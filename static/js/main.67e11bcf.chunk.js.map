{"version":3,"sources":["types/TodoStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers/helpers.ts","index.tsx"],"names":["TodoStatus","TodoList","todos","selectedTodoId","setSelectedTodoId","className","map","id","title","completed","isSelected","classNames","type","onClick","TodoFilter","query","setQuery","setTodoStatus","onChange","e","target","value","ALL","ACTIVE","COMPLETED","Object","values","enumValue","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","todo","handleCloseModal","useState","user","setUser","hasError","setHasError","loadUser","useCallback","a","userId","loadedUser","useEffect","href","email","name","App","setTodos","loading","setLoading","todoStatus","loadTodos","loadedTodos","visibleTodos","status","filter","normalizedQuery","trim","toLowerCase","includes","prepareTodos","currentTodo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67e11bcf.chunk.js","sourcesContent":["export enum TodoStatus {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import {\n  FC,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  setSelectedTodoId: Dispatch<SetStateAction<number>>,\n};\n\nexport const TodoList: FC<Props> = ({\n  todos,\n  selectedTodoId,\n  setSelectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({ id, title, completed }) => {\n          const isSelected = id === selectedTodoId;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              {completed ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (\n                <td className=\"is-vcentered\" />\n              )}\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  'has-text-success',\n                  {\n                    'has-text-danger': !completed,\n                  },\n                )}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setSelectedTodoId(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={isSelected\n                      ? 'far fa-eye-slash'\n                      : 'far fa-eye'}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import {\n  FC,\n  Dispatch,\n  SetStateAction,\n  ChangeEvent,\n} from 'react';\nimport { TodoStatus } from '../../types/TodoStatus';\n\ntype Props = {\n  query: string,\n  setQuery: Dispatch<SetStateAction<string>>,\n  setTodoStatus: Dispatch<SetStateAction<TodoStatus>>,\n};\n\nexport const TodoFilter: FC<Props> = ({\n  query,\n  setQuery,\n  setTodoStatus,\n}) => {\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    switch (e.target.value) {\n      case 'all':\n        setTodoStatus(TodoStatus.ALL);\n        break;\n      case 'active':\n        setTodoStatus(TodoStatus.ACTIVE);\n        break;\n      case 'completed':\n        setTodoStatus(TodoStatus.COMPLETED);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleChange}\n          >\n            {Object.values(TodoStatus).map((enumValue) => (\n              <option\n                key={enumValue}\n                value={enumValue}\n              >\n                {enumValue}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n              aria-label=\"clear search\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import {\n  FC,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo | null,\n  handleCloseModal: () => void,\n};\n\nexport const TodoModal: FC<Props> = ({\n  todo,\n  handleCloseModal,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasError, setHasError] = useState<boolean>(false);\n\n  const loadUser = useCallback(async () => {\n    try {\n      const loadedUser = await getUser(todo?.userId || 0);\n\n      setUser(loadedUser);\n    } catch (error) {\n      setHasError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return hasError ? (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-danger\"\n            data-cy=\"modal-header\"\n          >\n            An error occurred when loading the details\n          </div>\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={handleCloseModal}\n            aria-label=\"close modal\"\n          />\n        </header>\n      </div>\n    </div>\n  ) : (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n              aria-label=\"close modal\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\nimport { prepareTodos } from './helpers/helpers';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [todoStatus, setTodoStatus] = useState<TodoStatus>(TodoStatus.ALL);\n  const [hasError, setHasError] = useState(false);\n\n  const loadTodos = useCallback(async () => {\n    setLoading(true);\n    try {\n      const loadedTodos = await getTodos();\n\n      setTodos(loadedTodos);\n    } catch (error) {\n      setHasError(true);\n    }\n\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const visibleTodos = prepareTodos(todos, todoStatus, query);\n\n  const currentTodo = visibleTodos.find(todo => todo.id === selectedTodoId) || null;\n\n  const handleCloseModal = () => {\n    setSelectedTodoId(0);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {hasError ? (\n              <p className=\"has-text-danger\">An error occurred when loading data</p>\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter\n                    query={query}\n                    setQuery={setQuery}\n                    setTodoStatus={setTodoStatus}\n                  />\n                </div>\n\n                <div className=\"block\">\n                  {loading ? (\n                    <Loader />\n                  ) : (\n                    <TodoList\n                      todos={visibleTodos}\n                      selectedTodoId={selectedTodoId}\n                      setSelectedTodoId={setSelectedTodoId}\n                    />\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          todo={currentTodo}\n          handleCloseModal={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { TodoStatus } from '../types/TodoStatus';\n\nexport const prepareTodos = (\n  todos: Todo[],\n  status: string,\n  query: string,\n): Todo[] => {\n  let visibleTodos = [...todos];\n\n  switch (status) {\n    case TodoStatus.ACTIVE:\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n    case TodoStatus.COMPLETED:\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n    case TodoStatus.ALL:\n    default:\n      break;\n  }\n\n  if (query) {\n    const normalizedQuery = query.trim().toLowerCase();\n\n    visibleTodos = visibleTodos\n      .filter(todo => todo.title.toLowerCase().includes(normalizedQuery));\n  }\n\n  return visibleTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}